[
  {
    "id": 1,
    "title": "Setup TypeScript Project Structure",
    "description": "Initialize project, configure TypeScript, ESLint, Prettier, Jest, Nodemon. Create basic directory structure (src, models, routes, controllers, etc.) and essential config files.",
    "status": "done",
    "dependencies": [],
    "priority": "high",
    "details": "Create package.json, tsconfig.json, .eslintrc.json, .prettierrc, jest.config.js, nodemon.json. Setup src/ directory with subdirectories. Create basic entry point (src/index.ts or src/app.ts) and server starter (src/bin/www.ts).",
    "testStrategy": "Run `tsc` to check compilation, run `eslint` to check linting, run basic Jest test."
  },
  {
    "id": 2,
    "title": "Define Environment Configuration and Core Types/Interfaces",
    "description": "Setup environment variable handling (dotenv). Define core interfaces for API responses, Mongoose models, and other shared structures.",
    "status": "done",
    "dependencies": [1],
    "priority": "high",
    "details": "Create `src/config/config.ts` to load .env. Create `src/interfaces/` directory. Define `ApiResponse.interface.ts`, and initial interfaces for User, Campaign, Lead, LinkedInAccount, Proxy models.",
    "testStrategy": "Verify environment variables load correctly. Check interface definitions compile."
  },
  {
    "id": 3,
    "title": "Implement Database Models (Mongoose)",
    "description": "Define and implement Mongoose schemas and models for all required data structures based on the interfaces.",
    "status": "done",
    "dependencies": [2],
    "priority": "high",
    "details": "Create Mongoose models in `src/models/` for User, Campaign, Lead, LinkedInAccount, Proxy, LeadComment, LeadLog, LeadStatusDef, EmailSettings, PreviousLead, UserLog. Include necessary validation, timestamps, and relationships.",
    "testStrategy": "Ensure models compile and can connect to a test MongoDB instance."
  },
  {
    "id": 4,
    "title": "Implement Authentication and User Management API",
    "description": "Implement user registration, login (JWT), profile management (CRUD), and admin functionalities.",
    "status": "done",
    "dependencies": [1, 3],
    "priority": "high",
    "details": "Create `users.controller.ts` and `users.routes.ts`. Implement password hashing (bcrypt), JWT generation/verification (`Jwt.helper.ts`), authentication middleware (`auth.middleware.ts`). Create API endpoints for register, login, get/update profile, list users (admin), update user role (admin), delete user (admin).",
    "testStrategy": "API integration tests for user registration, login, authenticated endpoints, and admin actions."
  },
  {
    "id": 5,
    "title": "Implement Resource Management APIs (LinkedIn Accounts, Proxies)",
    "description": "Implement CRUD APIs for managing LinkedIn accounts and proxies.",
    "status": "done",
    "dependencies": [1, 3, 4],
    "priority": "medium",
    "details": "Create controllers and routes (`linkedInAccount.*`, `proxy.*`). Implement CRUD operations. Include placeholders for validation/verification logic (e.g., checking proxy validity, encrypting LinkedIn passwords). Ensure only admins or owners can manage.",
    "testStrategy": "API integration tests for CRUD operations on LinkedIn accounts and proxies, checking authorization."
  },
  {
    "id": 6,
    "title": "Implement Campaign Management API",
    "description": "Implement CRUD APIs for managing scraping campaigns.",
    "status": "done",
    "dependencies": [1, 3, 4, 5],
    "priority": "high",
    "details": "Create `campaign.controller.ts` and `campaign.routes.ts`. Implement CRUD operations for campaigns (search URL, target profiles, assigned account/proxy). Add endpoints/logic placeholders to start/stop campaigns.",
    "testStrategy": "API integration tests for campaign CRUD operations."
  },
  {
    "id": 7,
    "title": "Integrate Selenium WebDriver",
    "description": "Setup Selenium WebDriver initialization and basic configuration management.",
    "status": "done",
    "dependencies": [1, 2],
    "priority": "high",
    "details": "Add `selenium-webdriver` and `@types/selenium-webdriver`. Create a helper/service (`selenium.service.ts` or similar) to initialize WebDriver instances (Chrome) with options (headless, proxy) from config/campaign settings. Integrate initialization into the main app (`app.ts`).",
    "testStrategy": "Unit test WebDriver initialization with different options. Ensure driver can be created and quit successfully."
  },
  {
    "id": 8,
    "title": "Implement LinkedIn Authentication Module",
    "description": "Develop the service/functions to handle logging into LinkedIn via Selenium, including handling OTP/Captcha if necessary.",
    "status": "done",
    "dependencies": [5, 7],
    "priority": "high",
    "details": "Create `linkedInAuth.service.ts`. Implement functions like `performLogin(driver, account)`, `handleCaptcha(driver)`, `submitOtp(driver, otp)`. Use selectors (initially placeholders) to interact with the LinkedIn login page. Integrate with campaign start logic.",
    "testStrategy": "Manual testing against LinkedIn login flow. Unit tests for helper functions where possible."
  },
  {
    "id": 9,
    "title": "Implement LinkedIn Search Automation",
    "description": "Develop the service/functions to perform searches on LinkedIn based on campaign criteria and extract profile URLs.",
    "status": "done",
    "dependencies": [6, 8],
    "priority": "high",
    "details": "Create `linkedInSearch.service.ts`. Implement `performSearch(driver, campaign)` function to navigate to search results, apply filters (placeholder), handle pagination, extract profile URLs. Store extracted URLs/initial leads in the database, checking against `PreviousLead` model.",
    "testStrategy": "Manual testing against LinkedIn search. Unit tests for URL extraction/parsing logic."
  },
  {
    "id": 10,
    "title": "Implement LinkedIn Profile Scraping",
    "description": "Develop the service/functions to navigate to individual LinkedIn profiles and scrape required data.",
    "status": "done",
    "dependencies": [9],
    "priority": "high",
    "details": "Create `linkedInProfileScraper.service.ts`. Implement `scrapeProfile(driver, profileUrl)` to extract details (name, title, company, location, etc.) using selectors (placeholders). Update the corresponding Lead record in the database with scraped data and status. Handle potential errors/profile variations.",
    "testStrategy": "Manual testing against various LinkedIn profiles. Unit tests for data extraction logic if possible."
  },
  {
    "id": 11,
    "title": "Implement Lead Management API",
    "description": "Implement APIs for viewing, updating (status, details), and deleting leads.",
    "status": "done",
    "dependencies": [1, 3, 4, 10],
    "priority": "medium",
    "details": "Create `lead.controller.ts` and `lead.routes.ts`. Implement endpoints for listing leads (with filtering/pagination), getting a single lead, updating lead details/status, and deleting leads. Ensure proper authorization.",
    "testStrategy": "API integration tests for lead CRUD operations and filtering."
  },
  {
    "id": 12,
    "title": "Implement Lead Annotation/Logging",
    "description": "Implement APIs and logic for adding comments/notes to leads and logging lead status changes/actions.",
    "status": "in-progress",
    "dependencies": [11],
    "priority": "medium",
    "details": "Create models/controllers/routes for `LeadComment` (CRUD) and `LeadLog` (Create/Read). Integrate log creation into relevant actions (e.g., status updates, scraping attempts).",
    "testStrategy": "API integration tests for comment CRUD and log viewing. Verify logs are created correctly."
  },
  {
    "id": 13,
    "title": "Integrate Redis for Locking/Caching",
    "description": "Implement Redis connection and use it for distributed locking (preventing multiple instances from processing the same campaign/lead) and potentially caching.",
    "status": "done",
    "dependencies": [1, 2],
    "priority": "medium",
    "details": "Add `redis` client library. Create `redis.service.ts` for client initialization and helper functions (e.g., `acquireLock`, `releaseLock`). Integrate locking mechanisms around critical sections like campaign processing or lead scraping.",
    "testStrategy": "Unit tests for locking functions. Integration tests simulating concurrent access."
  },
  {
    "id": 14,
    "title": "Implement Scheduling (node-schedule)",
    "description": "Use `node-schedule` to run campaign processing logic periodically.",
    "status": "pending",
    "dependencies": [6, 9, 10, 13],
    "priority": "medium",
    "details": "Add `node-schedule`. Create `scheduler.service.ts` or similar. Define cron jobs based on campaign settings to trigger the search and scraping logic. Ensure locking is used to prevent overlaps.",
    "testStrategy": "Verify jobs run at expected times. Check logs for correct execution and locking behavior."
  },
  {
    "id": 15,
    "title": "Implement Email Notifications",
    "description": "Setup Nodemailer and implement email notifications for events like campaign completion or errors.",
    "status": "pending",
    "dependencies": [1, 2, 3],
    "priority": "low",
    "details": "Add `nodemailer`. Create `email.service.ts` for transporter setup and sending emails. Implement `EmailSettings` model/API. Trigger emails from relevant parts of the application (e.g., error handlers, campaign completion).",
    "testStrategy": "Unit tests for email sending function. Verify emails are received correctly during integration tests."
  }
]