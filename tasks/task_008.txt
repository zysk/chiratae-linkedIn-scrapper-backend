# Task ID: 8
# Title: Lead Management and Annotation System
# Status: pending
# Dependencies: 6
# Priority: medium
# Description: Implement Lead model, status tracking, assignment functionality, comments, and activity logging.
# Details:
1. Create Lead model as a link between Campaign, User (CLIENT), and User (standard)
2. Implement LeadStatus model for custom status definitions
3. Create CRUD API endpoints for leads
4. Implement lead assignment functionality
5. Add lead filtering and sorting capabilities
6. Create LeadComment model for annotations
7. Implement CRUD API endpoints for comments
8. Create LeadLogs model for activity tracking
9. Implement automated log creation during key events
10. Add API endpoint for retrieving lead logs
11. Create lead export functionality (/lead/exportLeadsToExcel)

# Test Strategy:
1. Test Lead model relationships
2. Verify CRUD operations for leads, comments, and statuses
3. Test lead assignment functionality
4. Verify activity logging works correctly
5. Test lead export functionality

# Subtasks:
## 1. Create Lead Model [pending]
### Dependencies: None
### Description: Implement the Lead model as a link between Campaign, User (CLIENT), and User (standard)
### Details:
1. Define the Lead model with fields like id, campaign_id, client_user_id, assigned_user_id, status_id, created_at, updated_at.
2. Establish the relationships between Lead, Campaign, and User models.
3. Implement the Lead model in the codebase.

## 2. Implement LeadStatus Model [pending]
### Dependencies: 8.1
### Description: Create the LeadStatus model for custom status definitions
### Details:
1. Define the LeadStatus model with fields like id, name, description.
2. Implement the LeadStatus model in the codebase.
3. Ensure the Lead model has a foreign key relationship with the LeadStatus model.

## 3. Implement Lead CRUD API [pending]
### Dependencies: 8.1, 8.2
### Description: Create CRUD API endpoints for leads
### Details:
1. Implement the create, read, update, and delete API endpoints for the Lead model.
2. Ensure the API endpoints handle the relationships with Campaign and User models.
3. Implement input validation and error handling for the API endpoints.

## 4. Implement Lead Assignment [pending]
### Dependencies: 8.3
### Description: Implement lead assignment functionality
### Details:
1. Implement the logic to assign a lead to a user.
2. Ensure the API endpoint for lead assignment updates the assigned_user_id field in the Lead model.
3. Implement notifications or events to inform the assigned user about the new lead.

## 5. Implement Lead Filtering and Sorting [pending]
### Dependencies: 8.3
### Description: Add lead filtering and sorting capabilities
### Details:
1. Implement the logic to filter leads based on various criteria like status, campaign, assigned user, etc.
2. Implement the logic to sort leads based on fields like created_at, updated_at, status, etc.
3. Expose the filtering and sorting capabilities through the Lead API endpoints.

## 6. Implement Lead Comments and Activity Logs [pending]
### Dependencies: 8.3
### Description: Create LeadComment model for annotations and LeadLogs model for activity tracking
### Details:
1. Define the LeadComment model with fields like id, lead_id, user_id, comment, created_at.
2. Implement the CRUD API endpoints for lead comments.
3. Define the LeadLogs model with fields like id, lead_id, user_id, action, created_at.
4. Implement the logic to automatically create lead logs during key events like lead creation, assignment, status change, etc.
5. Expose the lead logs through a dedicated API endpoint.
