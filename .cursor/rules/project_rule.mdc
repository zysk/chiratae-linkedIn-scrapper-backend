---
description:
globs:
alwaysApply: false
---
# Revamp Project Rules

## Goal
Revamp the existing project while preserving **all** business logic and improving optimization, usability, and best practices.

## Legacy Analysis
- Review **`old-code/`** thoroughly to capture every rule and edge case.

## Requirement Alignment
Validate each change against:
- `docs/linkedin-scrapper-requirement-details.md`
- `scripts/prd.txt`
- Tasks generated by **Task Master**

## Implementation Rules
- Replicate previous business logic exactly; refine only for performance, readability, and maintainability.
- Prefer MCP tools (Context7, SequentialThinking, MongoDB, Postman, Task Master, etc.) wherever applicable.
- Before starting local dev server using `npm start dev`, make sure to **kill all the terminals** forcefully.

## Postman Collections
- For new tasks, merge requests/tests into the single master collection along with previous onces, maintaining a single consolidated up-to-date file.

## Testing Workflow
1. Test and validate all the completed tasks till now along with the current one using Postman and MongoDB MCP tools.
2. After passing tests, re-analyze the task against the legacy code and update if anything or any scenario got missed.
3. Until API testing through Postman and MongoDB MCP tools are getting executed successfully and final report is not generating, never mark the current task as `done`.
4. Store all testing artifacts in `tests/postman/collections/` along with previous onces.
	- Once done, analyze all the previous files and maintaining a single consolidated up-to-date file.
5. Store all testing artifacts in `tests/postman/artifacts/` along with previous onces.
	- Once done, analyze all the previous files and maintaining a single consolidated up-to-date file.
6. Generate and store test scripts for API endpoints in `tests/test-scripts/` along with previous onces.
	- Once done, analyze all the previos files and maintaining a single consolidated up-to-date file. Make sure to create `.js` file.

## Documentation & Status
1. Store task/project status files in `docs/current-status/`along with previous onces.
	- Once done, analyze all the previos files and maintaining a single consolidated up-to-date file.

## README Checklist
- High-level overview
- Key features
- Getting started
- Technical specs
- Developer guide
- Directory & business-logic map
- API docs
- Contributing & License
- Future scope
